взяти визначення РМв1;

структура SqliteExecCallbackData {
  Р: адреса<РМв1::Розширення>;
  обʼєкт_рядків: адреса<РМв1::Обʼєкт>;
}

синонім SqliteExecCallback = (data: адреса<SqliteExecCallbackData>, argc: int, argv: памʼять<адреса<char>>, column_names: памʼять<адреса<char>>) -> int;
зовнішня дія sqlite_mavka_extension_open(path: адреса<char>, path_size: size_t): адреса;
зовнішня дія sqlite_mavka_extension_exec(db: адреса, sql: адреса<char>, sql_size: size_t, callback: SqliteExecCallback, data: адреса<SqliteExecCallbackData>, error_ptr: адреса<адреса<char>>, error_size_ptr: адреса<size_t>): int;

дія нативна_дія_open(обʼєкт_нативної_дії: адреса<РМв1::Обʼєкт>, Р: адреса<РМв1::Розширення>, обʼєкт_я: адреса<РМв1::Обʼєкт>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<РМв1::Обʼєкт>>, іменовані_аргументи: адреса<РМв1::ІменованіАргументи>, дані: адреса): РМв1::Результат {
  змінна ціль знайдено_аргумент_шлях = ні;
  змінна ціль аргумент_шлях: адреса<РМв1::Обʼєкт> = пусто;
  якщо іменовані_аргументи != пусто {
    знайдено_аргумент_шлях = РМв1::знайти_іменований_аргумент(Р, іменовані_аргументи, РМв1::назва_з_Ю8(Р, ю8"шлях"), аргумент_шлях::адреса);
  }
  якщо кількість_аргументів > 0 {
    якщо знайдено_аргумент_шлях == ні {
      знайдено_аргумент_шлях = так;
      аргумент_шлях = аргументи[0];
    }
  }
  якщо знайдено_аргумент_шлях == ні {
    вернути РМв1::падіння(Р, РМв1::створити_текст_з_Ю8(Р, ю8"Пропущено аргумент \"шлях\""));
  }
  якщо РМв1::перевірити_чи_обʼєкт_є_юнікодом(аргумент_шлях, Р) == ні {
    вернути РМв1::падіння(Р, РМв1::створити_текст_з_Ю8(Р, ю8"Аргумент \"шлях\" має бути юнікодом"));
  }
  РМв1::зберегти_обʼєкт(Р, аргумент_шлях);
  ціль шлях_Ю8: памʼять<п8> = пусто;
  ціль розмір_шляху_Ю8 = РМв1::отримати_копію_даних_юнікоду_як_Ю8(аргумент_шлях, Р, шлях_Ю8::адреса);
  ціль sqlite_db = sqlite_mavka_extension_open(шлях_Ю8 як адреса<char>, size_t(розмір_шляху_Ю8));
  якщо sqlite_db == пусто {
    вернути РМв1::успіх(Р, пусто);
  }
  вернути РМв1::успіх(Р, РМв1::створити_адресу(Р, sqlite_db));
}

дія exec_callback(data: адреса<SqliteExecCallbackData>, argc: int, argv: памʼять<адреса<char>>, column_names: памʼять<адреса<char>>): int {
  ціль Р = data.Р;
  ціль обʼєкт_рядків = data.обʼєкт_рядків;
  ціль рядок = РМв1::створити_словник(Р);
  РМв1::зберегти_обʼєкт(Р, обʼєкт_рядків);
  РМв1::зберегти_обʼєкт(Р, рядок);
  змінна ціль п: int = 0;
  поки п < argc {
    змінна ціль ключ = РМв1::створити_юнікод_з_Ю8(Р, column_names[п] як памʼять<п8>);
    змінна ціль значення = РМв1::створити_юнікод_з_Ю8(Р, argv[п] як памʼять<п8>);
    РМв1::зберегти_обʼєкт(Р, ключ);
    РМв1::зберегти_обʼєкт(Р, значення);
    ціль результат_зміни_елемента = РМв1::обʼєкт_змінити_елемент(рядок, Р, ключ, значення);
    РМв1::видалити_збережений_обʼєкт(Р);
    РМв1::видалити_збережений_обʼєкт(Р);
    п += 1;
  }
  ціль результат_отримання_довжини = РМв1::обʼєкт_отримати_властивість(обʼєкт_рядків, Р, РМв1::назва_з_Ю8(Р, ю8"довжина"));
  ціль довжина_д64 = РМв1::отримати_значення_числа(результат_отримання_довжини.значення, Р);
  ціль результат_зміни_елемента = РМв1::обʼєкт_змінити_елемент(обʼєкт_рядків, Р, РМв1::створити_число(Р, довжина_д64), рядок);
  РМв1::видалити_збережений_обʼєкт(Р);
  РМв1::видалити_збережений_обʼєкт(Р);
  вернути 0;
}

дія нативна_дія_exec(обʼєкт_нативної_дії: адреса<РМв1::Обʼєкт>, Р: адреса<РМв1::Розширення>, обʼєкт_я: адреса<РМв1::Обʼєкт>, кількість_аргументів: позитивне, аргументи: памʼять<адреса<РМв1::Обʼєкт>>, іменовані_аргументи: адреса<РМв1::ІменованіАргументи>, дані: адреса): РМв1::Результат {
  змінна ціль знайдено_аргумент_db = ні;
  змінна ціль аргумент_db: адреса<РМв1::Обʼєкт> = пусто;
  змінна ціль знайдено_аргумент_sql = ні;
  змінна ціль аргумент_sql: адреса<РМв1::Обʼєкт> = пусто;
  якщо іменовані_аргументи != пусто {
    знайдено_аргумент_db = РМв1::знайти_іменований_аргумент(Р, іменовані_аргументи, РМв1::назва_з_Ю8(Р, ю8"db"), аргумент_db::адреса);
    знайдено_аргумент_sql = РМв1::знайти_іменований_аргумент(Р, іменовані_аргументи, РМв1::назва_з_Ю8(Р, ю8"sql"), аргумент_sql::адреса);
  }
  якщо кількість_аргументів > 0 {
    якщо знайдено_аргумент_db == ні {
      знайдено_аргумент_db = так;
      аргумент_db = аргументи[0];
    }
      якщо кількість_аргументів > 1 {
        якщо знайдено_аргумент_sql == ні {
          знайдено_аргумент_sql = так;
          аргумент_sql = аргументи[1];
        }
      }
  }
  якщо знайдено_аргумент_db == ні {
    вернути РМв1::падіння(Р, РМв1::створити_текст_з_Ю8(Р, ю8"Пропущено аргумент \"db\""));
  }
  якщо знайдено_аргумент_sql == ні {
    вернути РМв1::падіння(Р, РМв1::створити_текст_з_Ю8(Р, ю8"Пропущено аргумент \"sql\""));
  }
  якщо РМв1::перевірити_чи_обʼєкт_є_адресою(аргумент_db, Р) == ні {
    вернути РМв1::падіння(Р, РМв1::створити_текст_з_Ю8(Р, ю8"Аргумент \"db\" має бути адресою"));
  }
  якщо РМв1::перевірити_чи_обʼєкт_є_юнікодом(аргумент_sql, Р) == ні {
    вернути РМв1::падіння(Р, РМв1::створити_текст_з_Ю8(Р, ю8"Аргумент \"sql\" має бути юнікодом"));
  }
  РМв1::зберегти_обʼєкт(Р, аргумент_db);
  РМв1::зберегти_обʼєкт(Р, аргумент_sql);
  ціль db = РМв1::отримати_значення_адреси(аргумент_db, Р);
  ціль sql: памʼять<п8> = пусто;
  ціль sql_size = РМв1::отримати_копію_даних_юнікоду_як_Ю8(аргумент_sql, Р, sql::адреса);
  змінна ціль error: памʼять<п8> = пусто;
  змінна ціль error_size: size_t = 0;
  ціль data = РМв1::виділити<SqliteExecCallbackData>(Р);
  data.Р = Р;
  data.обʼєкт_рядків = РМв1::створити_список(Р);
  ціль success = sqlite_mavka_extension_exec(db, sql як адреса<char>, size_t(sql_size), exec_callback, data, error::адреса як адреса<адреса<char>>, error_size::адреса);
  якщо success == 0 {
    вернути РМв1::падіння(Р, РМв1::створити_юнікод_з_Ю8(Р, ю8"Помилка SQL"));
  }
  вернути РМв1::успіх(Р, data.обʼєкт_рядків);
}

зовнішня дія завантажити_РМв1(Р: адреса<РМв1::Розширення>): РМв1::Результат {
  ціль обʼєкт_модуля_sqlite = РМв1::створити_модуль(Р, РМв1::назва_з_Ю8(Р, ю8"sqlite"));
  РМв1::зберегти_обʼєкт(Р, обʼєкт_модуля_sqlite);
  ціль обʼєкт_нативної_дії_open = РМв1::створити_нативну_дію(Р, РМв1::назва_з_Ю8(Р, ю8"open"), нативна_дія_open, пусто, пусто);
  РМв1::обʼєкт_змінити_властивість(обʼєкт_модуля_sqlite, Р, РМв1::назва_з_Ю8(Р, ю8"open"), обʼєкт_нативної_дії_open);
  ціль обʼєкт_нативної_дії_exec = РМв1::створити_нативну_дію(Р, РМв1::назва_з_Ю8(Р, ю8"exec"), нативна_дія_exec, пусто, пусто);
  РМв1::обʼєкт_змінити_властивість(обʼєкт_модуля_sqlite, Р, РМв1::назва_з_Ю8(Р, ю8"exec"), обʼєкт_нативної_дії_exec);
  РМв1::видалити_збережений_обʼєкт(Р);
  вернути РМв1::успіх(Р, обʼєкт_модуля_sqlite);
}